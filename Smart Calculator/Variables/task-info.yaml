type: edu
custom_name: stage6
files:
- name: calculator/calculator.py
  visible: true
  text: |
    # write your code here
    class Calculator:
        commands = {'/help': 'The program calculates the sum of numbers',
                    '/exit': 'Bye!'}

        def __init__(self, user_input=None):
            self.user_input = user_input

        def messages(self):
            pass

        def __operation_list(self):
            return self.user_input.split(' ')
            # We can add later parenthesis by checking for them and converting
            # whatever it is between them to a list occupying that position

        def __calculate_sign(self, sign_string: str):
            sign_list = list(sign_string)
            sign = sign_list.pop()
            for signs in sign_list:
                if signs == '-' and sign == '+':
                    sign = '-'
                elif signs == '-' and sign == '-':
                    sign = '+'
            return sign

        def __solve(self, op_list: list):
            try:
                while True:
                    sub_op = [int(op_list.pop())] # First and last from the operation are numbers,
                                                  # failure means invalid expression
                    if len(op_list) == 0:         # Except if it is a single number
                        op_list.append(sub_op.pop())
                        break
                    sub_op.append(op_list.pop()) # Get the first operand
                    while not sub_op[-1].isnumeric():
                        sub_op.append(op_list.pop()) # Then keep popping until you find another number
                    sub_op[-1] = int(sub_op[-1]) # Same deal here
                    if len(sub_op[1]) > 1:
                        sub_op = [sub_op[0], self.__calculate_sign(sub_op[1]), sub_op[-1]] # Calculate the sign of the operation
                    if sub_op[1] == '+':
                        op_list.append(sub_op[-1] + sub_op[0])
                    elif sub_op[1] == '-':
                        op_list.append(sub_op[0] - sub_op[-1])
            except (IndexError, ValueError):
                return "Invalid expression"
            return op_list[0]

        def logic(self):
            if self.user_input == '':
                pass
            elif self.user_input in self.commands.keys():
                print(self.commands[self.user_input])
            elif self.user_input[0] == '/':
                print('Unknown command')
            elif self.user_input[0] != '/':
                operation_list = list(self.__operation_list())
                operation_list.reverse()  # Invert the list so we start at the beginning
                result = self.__solve(operation_list)
                if result is not None:
                    print(result)
            else:
                raise Exception("Logic error, not accounting for all use cases, self.user_input is : " + self.user_input)


    if __name__ == '__main__':
        calc = Calculator()
        while calc.user_input != '/exit':
            calc.user_input = input()
            # calc.user_input = '3 + 2 + 1'
            calc.logic()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CalcTest(StageTest):
        on_exit = False

        def generate(self) -> List[TestCase]:
            return [TestCase(stdin=['/help', self.test_1_1, self.test_1_2]),
                    TestCase(stdin=['5 + 1 + 4', self.test_2_1, self.test_2_2, self.test_2_3,
                                    self.test_2_4, self.test_2_5]),
                    TestCase(stdin=['n = 5', self.test_3_1, self.test_3_2, self.test_3_3, self.test_3_4, self.test_3_5,
                                    self.test_3_6, self.test_3_7, self.test_3_8, self.test_3_9,
                                    self.test_3_10, self.test_3_11]),
                    TestCase(stdin=['a = 9\nb=2\nc = 1', self.test_4_1, self.test_4_2, self.test_4_3, self.test_4_4,
                                    self.test_4_5, self.test_4_6]),
                    TestCase(stdin=['var1 = 1', self.test_5_1, self.test_5_2, self.test_5_3, self.test_5_4,
                                    self.test_5_5, self.test_5_6])]

        # test of functionality of previous steps #################################
        # test of /help command
        def test_1_1(self, output):
            output = str(output).lower().strip()
            if len(output.split(" ")) < 3:
                return CheckResult.wrong("It seems like there was no any \"help\" message.")
            return ""

        # input empty string
        def test_1_2(self, output):
            output = str(output)
            if len(output) != 0:
                return CheckResult.wrong("Incorrect response to an empty string. "
                                         "The program should not print anything.")
            self.on_exit = True
            return "/exit"

        # sum of positive numbers
        def test_2_1(self, output):
            output = str(output).lower().strip()
            if output != "10":
                return CheckResult.wrong("The program cannot sum more than two numbers.")
            return "23 - 17 - 13"

        # sum of numbers with different signs & negative answer
        def test_2_2(self, output):
            output = str(output).lower().strip()
            if output != "-7":
                return CheckResult.wrong("Incorrect sum of positive and negative numbers.")
            return "33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4"

        # testing a big amount of numbers
        def test_2_3(self, output):
            output = str(output).lower().strip()
            if output != "-3":
                return CheckResult.wrong("The program cannot process a large number of numbers.")
            return "11 - 7 - 4"

        # deleted due to excessive complexity
        # def test_6(self, output):
        #     output = str(output).lower().strip()
        #     if output != "0":
        #         return CheckResult.wrong("The problem when sum is equal to 0 has occurred.")
        #     return "5 --- 2 ++++++ 4 -- 2 ---- 1" output = 10

        # the sum is zero
        def test_2_4(self, output):
            output = str(output).lower().strip()
            if output != "0":
                return CheckResult.wrong("The program cannot process multiple operations with several operators.")
            return "/start"

        # test of nonexistent command
        def test_2_5(self, output):
            output = str(output).lower().strip()
            if "unknown" not in output:
                return CheckResult.wrong("The program should print \"Unknown command\" " +
                                         "when a nonexistent command is entered.")
            self.on_exit = True
            return "/exit"

        # testing basic assignments
        def test_3_1(self, output):
            if len(output) != 0:
                return CheckResult.wrong("Unexpected reaction after assignment."
                                         "The program should not print anything in this case.")
            return "m=2"

        # assignment without spaces
        def test_3_2(self, output):
            if len(output) != 0:
                return CheckResult.wrong("Unexpected reaction after assignment."
                                         "The program should not print anything in this case.")
            return "a    =  7"

        # assignment with extra spaces
        def test_3_3(self, output):
            if len(output) != 0:
                return CheckResult.wrong("Unexpected reaction after assignment."
                                         "The program should not print anything in this case.")
            return " c=  a "

        # assign the value of another variable
        def test_3_4(self, output):
            if len(output) != 0:
                return CheckResult.wrong("Unexpected reaction after assignment."
                                         "The program should not print anything in this case.")
            return "a"

        # test printing values of the variables
        def test_3_5(self, output):
            output = str(output).lower().strip()
            if output != "7":
                return CheckResult.wrong("The variable stores not a correct value.")
            return "c"

        def test_3_6(self, output):
            output = str(output).lower().strip()
            if output != "7":
                return CheckResult.wrong("The variable stores not a correct value.")
            return "test = 0"

        # trying to assign a new variable after other operations
        def test_3_7(self, output):
            if len(output) != 0:
                return CheckResult.wrong("Unexpected reaction after assignment."
                                         "The program should not print anything in this case.")
            return "test"

        # checking if the assignment was successful
        def test_3_8(self, output):
            output = str(output).lower().strip()
            if output != "0":
                return CheckResult.wrong("The variable stores not a correct value.")
            return "test = 1"

        # trying to reassign
        def test_3_9(self, output):
            if len(output) != 0:
                return CheckResult.wrong("Unexpected reaction after assignment."
                                         "The program should not print anything in this case.")
            return "a = test"

        # trying to reassign with the value of another variable
        def test_3_10(self, output):
            if len(output.strip()) != 0:
                return CheckResult.wrong("Unexpected reaction after assignment."
                                         "The program should not print anything in this case.")
            return "a"

        def test_3_11(self, output):
            output = str(output).lower().strip()
            if output != "1":
                return CheckResult.wrong("The program could not reassign variable.")
            self.on_exit = True
            return "/exit"

        # testing operations with variables
        # creating some variables (a = 9, b=2 and c=1)
        # and testing simple adding
        def test_4_1(self, output):
            if len(output) != 0:
                return CheckResult.wrong("Unexpected reaction after assignment."
                                         "The program should not print anything in this case.")
            return "a + b"

        def test_4_2(self, output):
            output = str(output).lower().strip()
            if output != "11":
                return CheckResult.wrong("The program cannot perform operations with variables. " +
                                         "For example, addition operation.")
            return "b - a"

        # subtracting test
        def test_4_3(self, output):
            output = str(output).lower().strip()
            if output != "-7":
                return CheckResult.wrong("The program cannot perform operations with variables. " +
                                         "For example, subtraction operation.")
            return "b + c"

        # adding a negative number
        def test_4_4(self, output):
            output = str(output).lower().strip()
            if output != "3":
                return CheckResult.wrong("The program cannot perform operations with variables. " +
                                         "For example, addition operation.")
            return "b - c"

        # subtracting a negative number
        def test_4_5(self, output):
            output = str(output).lower().strip()
            if output != "1":
                return CheckResult.wrong("The program cannot perform operations with variables. " +
                                         "For example, subtraction operation.")
            return "a -- b - c + 3 --- a ++ 1"

        # testing multiple operations
        def test_4_6(self, output):
            output = str(output).lower().strip()
            if output != "5":
                return CheckResult.wrong("The program cannot perform several operations in one line.")
            self.on_exit = True
            return "/exit"

        # a set of negative test ##################################################
        # testing invalid variable name
        def test_5_1(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The name of a variable should contain only Latin letters.")
            return "var = 2a"

        # testing invalid value
        def test_5_2(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The value can be an integer number or a value of another variable.")
            return "c = 7 -  1 = 5"

        # test multiple equalization
        def test_5_3(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The program could not handle a invalid assignment.")
            return "variable = f"

        # testing assignment by unassigned variable
        def test_5_4(self, output):
            output = str(output).lower().strip()
            if "unknown" not in output and "invalid" not in output:
                return CheckResult.wrong("The program should not allow an assignment by unassigned variable.")
            return "variable = 777"

        # checking case sensitivity
        def test_5_5(self, output):
            if len(output) != 0:
                return CheckResult.wrong("Unexpected reaction after assignment. "
                                         "The program should not print anything in this case.")
            return "Variable"

        def test_5_6(self, output):
            output = str(output).lower().strip()
            if "unknown" not in output:
                return CheckResult.wrong("The program should be case sensitive.")
            self.on_exit = True
            return "/exit"

        def check(self, reply: str, attach) -> CheckResult:
            if self.on_exit:
                reply = reply.strip().lower().split('\n')
                self.on_exit = False
                if 'bye' not in reply[-1]:
                    return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".")
                else:
                    return CheckResult.correct()
            else:
                return CheckResult.wrong("The program ended prematurely")


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/74/stages/414/implement#comment
status: Unchecked
record: -1
